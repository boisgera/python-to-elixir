# Functions

## Anonymous Functions

```elixir
p = fn x -> IO.puts(x) end
```

```elixir
is_function(p)
```

```elixir
# arity
is_function(p, 0)
```

```elixir
# arity
is_function(p, 1)
```

```elixir
# arity
is_function(p, 2)
```

```elixir
p.("Hello world!")
```

```elixir
(fn x -> x + 1 end).(7)
```

```elixir
(fn x ->
   y = x + 2
   z = y - 1
   z
 end).(7)
```

```elixir
# Would be reformated to multiple lines. Lol it did it automatically?
# What I meant to demonstrate was that ";" could be used instead of "\n"
(fn x ->
   y = x + 2
   z = y - 1
   z
 end).(7)
```

```elixir
(fn x ->
   IO.puts(x)
   :ok
 end).("Dude!")
```

```elixir
adder = fn x -> fn y -> x + y end end
add7 = adder.(7)
add7.(8)
```

And now an even more compact / agressive syntactic version of anonymous functions.
(Limitations: no constant function, single-expression only (no blocks)).

```elixir
# needed since f = IO.puts would CALL the function
f = &IO.puts(&1)
```

```elixir
f.("Hello!")
```

```elixir
add = &(&1 + &2)
```

```elixir
add.(2, 3)
```

```elixir
# Issue here for closure to disambiguate the argument
adder = &(&(&1 + &2))
# -> nested captures are not allowed which makes sense. So this notation may
# be handy but it is also a bit cryptic and is less general than `(fn -> ... end)`.
```

## Named Functions

```elixir
# üôÅ
def p(message) do
  IO.puts(message)
end
```

```elixir
defmodule Utils do
  def p(message) do
    IO.puts(message)
  end

  def g() do
    IO.puts("---")
  end
end
```

```elixir
p("Hello!")
```

```elixir
Utils.p("Hello!")
```

```elixir
import Utils
```

```elixir
p("Hello!")
```

```elixir
# wow. Function of arity 0 called !!! 
# Not what was intended (by me), 
# but consistent wrt the optional nature of parentheses in function call
f = Utils.g()

# Mmm does it mean that there are not "public constants" in Module 
# or do we have the same syntax that can mean two different things here?
```

```elixir
# f is now an unnamed function
f = &Utils.f/1
```

Question: I am a bit fuzzy about what the need to specify arity means here. Probably:

1. Functions with different arity within a module are considered as not related (the common name is considered "an accident" by the VM)
2. What does it mean for functions with default arguments. Are they expanded to functions with different arities and then does it mean that we can't capture them as anonymous functions?

```elixir
f.("Hello world!")
```

**üöß TODO:** end of the concepts in <https://elixir-lang.org/getting-started/modules-and-functions.html>

## Arity, Guards & Default Values

```elixir
# Fuuuuuck. Default values only work for named functions.
f = fn x, y \\ 0 -> x + y end
```

```elixir
defmodule Utils do
  def add(x \\ 0, y \\ 0, z \\ 0) do
    x + y + z
  end
end
```

```elixir
Utils.add()
```

```elixir
Utils.add(1)
```

```elixir
Utils.add(1, 2)
```

```elixir
Utils.add(1, 2, 3)
```

```elixir
add = &Utils.add/0
```

```elixir
add.()
```

OK, the stuff with default values is effectively compiled to several distinct Erlang functions.

```elixir
defmodule Utils do
  def fact(n \\ 0)

  def fact(n) when n == 0 do
    1
  end

  # else
  def fact(n) do
    n * fact(n - 1)
  end
end

import Utils
```

```elixir
fact()
```

```elixir
fact(10)
```
